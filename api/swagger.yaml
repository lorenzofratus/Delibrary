swagger: "2.0"
info:
  version: "1.0.0"
  title: "Delibrary"
  description: "Delibrary è una biblioteca decentralizzata."
host: "localhost:2020"
basePath: "/v1"
tags:
- name: "utente"
  description: "Un utente di Delibrary."
schemes:
- "https"
- "http"
paths:
  /utenti:
    post:
      tags:
      - "utente"
      summary: "Crea un nuovo utente."
      operationId: "creaUtente"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Nuovo oggetto utente"
        required: true
        schema:
          $ref: "#/definitions/Utente"
      responses:
        "200":
          description: "Sucesso."
        "400":
          description: "Oggetto utente non valido."
    get:
      tags:
      - "utente"
      summary: "Tutti gli utenti di Delibrary."
      operationId: "getUtenti"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Una collezione di tutti gli utenti di Delibrary."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Utente"
        "500":
          description: "C'è stato un errore."
  /utenti/{username}:
    get:
      tags:
      - "utente"
      summary: "Trova l'utente associato allo username dato."
      operationId: "getUtenteByUsername"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Lo username dell'utente da restituire."
        required: true
        type: "string"
      responses:
        "200":
          description: "L'utente di Delibrary con lo username dato."
          schema:
            $ref: "#/definitions/Utente"
        "400":
          description: "Non ci sono utenti con lo username fornito."
        "500":
          description: "C'è stato un errore."
    put:
      tags:
      - "utente"
      summary: "Aggiorna i dati di un utente."
      description: "Questo può essere fatto solo dall'utente che ha effettuato l'accesso."
      operationId: "aggiornaUtente"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Lo username dell'utente di cui bisogna aggiornare i dati."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Versione aggiornata dell'utente."
        required: true
        schema:
          $ref: "#/definitions/Utente"
      responses:
        "200":
          description: "Successo."
        "400":
          description: "Utente fornito non valido."
        "404":
          description: "C'è stato un errore."
  /utenti/{username}/scambi:
    get:
      tags:
      - "scambio"
      summary: "Restituisce gli scambi in cui l'utente è coinvolto."
      operationId: "getScambiUtente"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Lo username dell'utente di cui si desidera conoscere gli scambi in corso."
        required: true
        type: "string"
      responses:
        "200":
          description: "Un array contentente gli scambi in cui l'utente è coinvolto."
          schema:
            type: array
            items:
              $ref: "#/definitions/Scambio"
        "400":
          description: "Non ci sono utenti con lo username fornito."
        "500":
          description: "C'è stato un errore."
  /scambi/{id}:
    put:
      tags:
      - "scambio"
      summary: "Aggiorna lo stato di uno scambio."
      description: "Questo può essere fatto solo dall'utente che ha effettuato l'accesso."
      operationId: "aggiornaScambio"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "L'ID dello scambio di cui bisogna aggiornare i dati."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Versione aggiornata dello scambio."
        required: true
        schema:
          $ref: "#/definitions/Scambio"
      responses:
        "200":
          description: "Successo."
        "400":
          description: "Scambio fornito non valido."
        "404":
          description: "C'è stato un errore."
    delete:
      tags:
      - "scambio"
      summary: "Rimuovi scambio"
      description: "Questo può essere fatto solo dall'utente che ha effettuato l'accesso."
      operationId: "rimuoviScambio"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID dello scambio da rimuovere"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successo"
        "400":
          description: "L'ID fornito non è valido"
        "404":
          description: "Scambio non trovato"
  /utente/login:
    get:
      tags:
      - "utente"
      summary: "Autentica utenti nel sistema."
      operationId: "loginUtente"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Lo username per il login."
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "La password per il logi IN CLEAR TEXT."
        required: true
        type: "string"
        format: "password"
      responses:
        "200":
          description: "Login effettuato."
          schema:
            type: "string"
        "400":
          description: "Username o password non validi."
  /utente/logout:
    get:
      tags:
      - "utente"
      summary: "Logout dell'utente dalla sessione corrente."
      description: ""
      operationId: "UenteLogout"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "Successo."
definitions:
  Utente:
    type: "object"
    title: "Utente"
    properties:
      username:
        type: "string"
        example: "nicheosala"
      email:
        type: "string"
        format: "email"
        example: "example@domain.org"
      nome:
        type: "string"
        example: "Nicolò"
      cognome:
        type: "string"
        example: "Sala"
      biblioteca:
        type: "array"
        items:
          $ref: "#/definitions/LibroUtenteBiblioteca"
      wishlist:
        type: "array"
        items:
          $ref: "#/definitions/LibroUtenteWishlist"
  LibroUtenteBiblioteca:
    type: "object"
    title: "LibroUtenteBiblioteca"
    properties:
      ISBN:
        type: "string"
        pattern: "/(978)?[0-9]{10}/"
        example: "1280229045"
      proprietario:
        $ref: "#/definitions/Utente"
      posizione:
        $ref: "#/definitions/Posizione"
      stato:
        type: "string"
        enum:
          - "letto"
          - "leggendo"
          - "leggerò"
  LibroUtenteWishlist:
    type: "object"
    title: "LibroUtenteWishlist"
    properties:
      ISBN:
        type: "string"
        pattern: "/(978)?[0-9]{10}/"
        example: "1245222222"
      proprietario:
        $ref: "#/definitions/Utente"
  Posizione:
    type: "object"
    title: "Posizione"
    properties:
      regione:
        type: "string"
        example: "Lombardia"
      provincia:
        type: "string"
        example: "Lecco"
      comune:
        type: "string"
        example: "Brivio"
  Scambio:
    type: "object"
    title: "Scambio"
    properties:
      id:
        type: "integer"
        format: "int64"
      utenteA:
        $ref: "#/definitions/Utente"
      utenteB:
        $ref: "#/definitions/Utente"
      libroRichiestoDaA:
        $ref: "#/definitions/LibroUtenteBiblioteca"
      librorichiestoDaB:
        $ref: "#/definitions/LibroUtenteBiblioteca"
      stato:
        type: "string"
        enum:
        - "proposto"
        - "completato"